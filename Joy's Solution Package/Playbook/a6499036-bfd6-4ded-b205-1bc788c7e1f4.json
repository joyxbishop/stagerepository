{"docSchemaVersion":1.0,"id":"66f54482a6b1e9f3a9186877","meta":{"actionsByState":{"active":0.0,"fail":0.0,"queued":0.0,"success":0.0},"assets":[],"audit":{"created":{"authProvider":{"id":"","title":"Swimlane"},"date":"2024-09-26T11:24:50.039+00:00","user":{"id":"7c0f03b8-4ea6-4567-a9b2-1be568e5e475","username":"koushik.kumar+git-test@swimlane.com"}},"modified":{"authProvider":{"id":"","title":"Swimlane"},"date":"2024-09-26T11:24:50.039+00:00","user":{"id":"7c0f03b8-4ea6-4567-a9b2-1be568e5e475","username":"koushik.kumar+git-test@swimlane.com"}},"version":1.0},"componentId":"aRqDSHHUWVWexAD7W","connectors":["swimlane_util"],"enabled":true,"playbooks":[],"pools":["$default"],"sharingUid":"a6499036-bfd6-4ded-b205-1bc788c7e1f4","src":"schema: playbook/2\nname: component_aRqDSHHUWVWexAD7W_playbook\nactions:\n  serialize_observables:\n    meta: {}\n    title: Serialize Observables\n    type: transformation\n    delay: 0\n    pool: \"\"\n    on-success: []\n    on-failure: []\n    on-complete: []\n    publish: {}\n    post: {}\n    timeout: 0\n    description: Collate the iOC Parser Action's output into an array of TEDS Observable objects.\n    transformations:\n      observables:\n        title: Observables\n        inputs:\n          data:\n            actions:\n              iOC_Parser:\n                result:\n                  $:ref: $DELETED\n              IOC_Parser:\n                result:\n                  $:ref: $actions.IOC_Parser.result\n            variables:\n              observable_output_types:\n                $:ref: $variables.observable_output_types\n          expression: >-\n            (\n              $observables := $sift(actions.IOC_Parser.result, function($v, $k) {\n                  $k in variables.observable_output_types\n              }) ~> $each(function($v, $k) {\n                  $v.{\n                      \"observable_type\": $k,\n                      \"observable_value\": $\n                  }\n              }) ~> $reduce($append) ~> $distinct ;\n\n\n              $type($observables) = \"array\" ? $observables : [ $observables ]\n            )\n        description: \"\"\n        display:\n          functions: []\n          advancedView: true\n        timeout: 0\n        meta: {}\n        actionType: jsonata\n        next: \"\"\n    entrypoint: observables\n  Observable_Output_Types:\n    title: Observable Output Types\n    type: createVariables\n    description: Define the arrays for collecting the iOC Parser output.\n    on-success:\n    - Build_IOC_Parser_Parameters: {}\n    on-failure: []\n    on-complete: []\n    publish: {}\n    inputs:\n    - name: observable_output_types\n      value:\n      - ipv4_public\n      - ipv6_public\n      - domain\n      - url\n      - md5\n      - sha1\n      - sha256\n      - email\n      - ipv4_private\n      - ipv6_private\n    inputSchemaReferenceId: a64755c4-2fe0-4f7f-b800-fa5dba8329e9\n    meta: {}\n    delay: 0\n    pool: \"\"\n    post: {}\n    timeout: 0\n  Build_IOC_Parser_Parameters:\n    title: Build IOC Parser Parameters\n    type: transformation\n    description: \"\"\n    on-success:\n    - IOC_Parser: {}\n    on-failure: []\n    on-complete: []\n    publish: {}\n    transformations:\n      domains_ignore_list:\n        title: Domains Ignore List\n        description: \"\"\n        display:\n          functions: []\n          advancedView: true\n        inputs:\n          expression: $replace(assets.Observable_Parser_Ignore_Lists.Domains,\" \", \"\")\n          data:\n            assets:\n              Observable_Parser_Ignore_Lists:\n                Domains:\n                  $:ref: $assets.Observable_Parser_Ignore_Lists.Domains\n        actionType: jsonata\n        next: ip_cidr_ignore_list\n        timeout: 0\n        meta: {}\n      ip_cidr_ignore_list:\n        title: IP CIDR Ignore List\n        description: \"\"\n        display:\n          functions: []\n          advancedView: true\n        inputs:\n          expression: $replace(assets.Observable_Parser_Ignore_Lists.'IP CIDR Ranges',\" \", \"\")\n          data:\n            assets:\n              Observable_Parser_Ignore_Lists:\n                $:ref: $assets.Observable_Parser_Ignore_Lists\n        actionType: jsonata\n        next: regex_ignore\n        timeout: 0\n        meta: {}\n      regex_ignore:\n        title: Regex Ignore\n        description: \"\"\n        display:\n          functions:\n          - function: lookup\n            inputs:\n            - '{ $:ref: $assets.Observable_Parser_Ignore_Lists }'\n            - Regex\n          advancedView: false\n        inputs:\n          expression: $lookup(assets.Observable_Parser_Ignore_Lists,'Regex')\n          data:\n            assets:\n              Observable_Parser_Ignore_Lists:\n                $:ref: $assets.Observable_Parser_Ignore_Lists\n        actionType: jsonata\n        next: \"\"\n        timeout: 0\n        meta: {}\n    entrypoint: domains_ignore_list\n    meta: {}\n    delay: 0\n    pool: \"\"\n    post: {}\n    timeout: 0\n  IOC_Parser:\n    title: IOC Parser\n    type: connector\n    description: \"\"\n    on-success:\n    - serialize_observables: {}\n    - serialize_observables: {}\n    on-failure: []\n    on-complete: []\n    publish: {}\n    action: swimlane_util.ioc_parser\n    inputs:\n      parameters:\n        text_body: '{ $:ref: $inputs.text_value }'\n        whitelist_domains: '{ $:ref: $actions.Build_IOC_Parser_Parameters.result.domains_ignore_list }'\n        whitelist_ip_cidr_ranges: '{ $:ref: $actions.Build_IOC_Parser_Parameters.result.ip_cidr_ignore_list }'\n        whitelist_regex: '{ $:ref: $actions.Build_IOC_Parser_Parameters.result.regex_ignore }'\n    pool: $default\n    testInputs:\n      parameters: {}\n    meta: {}\n    delay: 0\n    post: {}\n    timeout: 0\n    asset: \"\"\n    environment: {}\nmeta:\n  customActionInputSchema:\n    IOC_Parser: {}\ntitle: component_aQ756KtEqzA9m3lr3_playbook\ndescription: \"\"\nnamespace: $default\nentrypoints:\n- Observable_Output_Types\npool: \"\"\ntimeout: 0\npublish:\n  observables:\n    $:ref: $actions.serialize_observables.result.observables\nenvironment: {}\ninputs:\n  type: object\n  properties:\n    text_value:\n      title: Text Value\n      description: \"\"\n      type: string\ntriggers: {}\n","store":{},"validation":{"valid":true}},"playbook":{"actions":{"serialize_observables":{"meta":{},"title":"Serialize Observables","type":"transformation","delay":0,"pool":"","on-success":[],"on-failure":[],"on-complete":[],"publish":{},"post":{},"timeout":0,"description":"Collate the iOC Parser Action's output into an array of TEDS Observable objects.","transformations":{"observables":{"title":"Observables","inputs":{"data":{"actions":{"iOC_Parser":{"result":{"$:ref":"$DELETED"}},"IOC_Parser":{"result":{"$:ref":"$actions.IOC_Parser.result"}}},"variables":{"observable_output_types":{"$:ref":"$variables.observable_output_types"}}},"expression":"(\n  $observables := $sift(actions.IOC_Parser.result, function($v, $k) {\n      $k in variables.observable_output_types\n  }) ~> $each(function($v, $k) {\n      $v.{\n          \"observable_type\": $k,\n          \"observable_value\": $\n      }\n  }) ~> $reduce($append) ~> $distinct ;\n\n\n  $type($observables) = \"array\" ? $observables : [ $observables ]\n)"},"next":"","description":"","display":{"functions":[],"advancedView":true},"timeout":0,"meta":{},"actionType":"jsonata"}},"entrypoint":"observables"},"Observable_Output_Types":{"meta":{},"title":"Observable Output Types","type":"createVariables","delay":0,"pool":"","on-success":[{"Build_IOC_Parser_Parameters":{}}],"on-failure":[],"on-complete":[],"publish":{},"post":{},"timeout":0,"description":"Define the arrays for collecting the iOC Parser output.","inputSchemaReferenceId":"a64755c4-2fe0-4f7f-b800-fa5dba8329e9","inputs":[{"name":"observable_output_types","value":["ipv4_public","ipv6_public","domain","url","md5","sha1","sha256","email","ipv4_private","ipv6_private"]}]},"Build_IOC_Parser_Parameters":{"meta":{},"title":"Build IOC Parser Parameters","type":"transformation","delay":0,"pool":"","on-success":[{"IOC_Parser":{}}],"on-failure":[],"on-complete":[],"publish":{},"post":{},"timeout":0,"description":"","transformations":{"domains_ignore_list":{"title":"Domains Ignore List","inputs":{"data":{"assets":{"Observable_Parser_Ignore_Lists":{"Domains":{"$:ref":"$assets.Observable_Parser_Ignore_Lists.Domains"}}}},"expression":"$replace(assets.Observable_Parser_Ignore_Lists.Domains,\" \", \"\")"},"next":"ip_cidr_ignore_list","description":"","display":{"functions":[],"advancedView":true},"timeout":0,"meta":{},"actionType":"jsonata"},"ip_cidr_ignore_list":{"title":"IP CIDR Ignore List","inputs":{"data":{"assets":{"Observable_Parser_Ignore_Lists":{"$:ref":"$assets.Observable_Parser_Ignore_Lists"}}},"expression":"$replace(assets.Observable_Parser_Ignore_Lists.'IP CIDR Ranges',\" \", \"\")"},"next":"regex_ignore","description":"","display":{"functions":[],"advancedView":true},"timeout":0,"meta":{},"actionType":"jsonata"},"regex_ignore":{"title":"Regex Ignore","inputs":{"data":{"assets":{"Observable_Parser_Ignore_Lists":{"$:ref":"$assets.Observable_Parser_Ignore_Lists"}}},"expression":"$lookup(assets.Observable_Parser_Ignore_Lists,'Regex')"},"next":"","description":"","display":{"functions":[{"function":"lookup","inputs":["{ $:ref: $assets.Observable_Parser_Ignore_Lists }","Regex"]}],"advancedView":false},"timeout":0,"meta":{},"actionType":"jsonata"}},"entrypoint":"domains_ignore_list"},"IOC_Parser":{"meta":{},"title":"IOC Parser","type":"connector","delay":0,"pool":"$default","on-success":[{"serialize_observables":{}},{"serialize_observables":{}}],"on-failure":[],"on-complete":[],"publish":{},"post":{},"timeout":0,"description":"","action":"swimlane_util.ioc_parser","asset":"","environment":{},"inputs":{"parameters":{"text_body":"{ $:ref: $inputs.text_value }","whitelist_domains":"{ $:ref: $actions.Build_IOC_Parser_Parameters.result.domains_ignore_list }","whitelist_ip_cidr_ranges":"{ $:ref: $actions.Build_IOC_Parser_Parameters.result.ip_cidr_ignore_list }","whitelist_regex":"{ $:ref: $actions.Build_IOC_Parser_Parameters.result.regex_ignore }"}},"testInputs":{"parameters":{}}}},"description":"","entrypoints":["Observable_Output_Types"],"environment":{},"inputs":{"type":"object","properties":{"text_value":{"title":"Text Value","description":"","type":"string"}}},"meta":{"customActionInputSchema":{"IOC_Parser":{}}},"name":"component_aRqDSHHUWVWexAD7W_playbook","namespace":"$default","pool":"","publish":{"observables":{"$:ref":"$actions.serialize_observables.result.observables"}},"schema":"playbook/2","timeout":0.0,"title":"component_aQ756KtEqzA9m3lr3_playbook","triggers":{},"uuid":"00000000-0000-0000-0000-000000000000"}}